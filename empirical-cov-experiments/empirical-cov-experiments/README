# Heavy-Tailed ICA Experiments

This directory houses the files used to generate experiments for Heavy-Tailed Independent Component Analysis.
The purpose of the code is to compare various methods of solving the ICA problem when the lower order moments of the source distributions may be undefined.

## Algorithms compared

* FastICA [insert link here](#)
	- `pow3` - fourth cumulant nonlinearity
	- `tanh` - log cosh nonlinearity
* Fourier PCA [insert link here](#)
* SOBI
* JADE

## Contents

Following is only a brief description of each file in the top-level of the directory.
Third party files are located in the `third_party` folder.
See the source for full documentation.

__main.m__: Contains code sections to run each algorithm in sequence, both for dampened and undampened data, then plot the results. This is not a function and is meant to be run directly

__singlecomparison.m__: provides the function `singlecomparison(dim, lowersize, highsize, step, varargin)` which invokes a script to generate heavy-tailed samples, `S`, generates a random mixing matrix `A`, then proceeds to run a chosen ICA algorithm to recover the mixing matrix. Finally, computes various error metrics and returns them in a 2-row matrix. Columns of this matrix correspond to each different sample size used for the ICA algorithm

__amari.m__: Used to compute the Amari index of a particular matrix

__minangle__: Auxiliary function to compute the smallest angle between columns of a matrix

__rownorm.m__: Auxiliary function to compute the vector of norms of rows of a matrix

__phaseCorrect.m__: Uses procedure described in Fourier PCA paper to remove complex values from an estimated mixing matrix
